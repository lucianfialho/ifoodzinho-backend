const secureWebSocketService = require('../services/secureWebSocketService');
const coupleService = require('../services/coupleService');

class CoupleController {
  
  // Enviar convite para formar casal
  async sendCoupleInvite(req, res) {
    try {
      const { uid: fromUserId, name: fromUserName } = req.user;
      const { partnerCode } = req.body;
      
      if (!partnerCode) {
        return res.status(400).json({
          error: 'C√≥digo do parceiro(a) √© obrigat√≥rio',
          code: 'CODE_REQUIRED'
        });
      }
      
      const invite = await coupleService.sendCoupleInvite(fromUserId, partnerCode, fromUserName);
      
      res.json({
        success: true,
        message: 'Convite enviado com sucesso',
        invite
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao enviar convite:', error);
      res.status(400).json({
        error: error.message,
        code: 'INVITE_ERROR'
      });
    }
  }
  
  // Aceitar convite
  async acceptCoupleInvite(req, res) {
    try {
      const { uid: userId } = req.user;
      const { inviteId } = req.params;
      
      const couple = await coupleService.acceptCoupleInvite(inviteId, userId);
      
      res.json({
        success: true,
        message: 'Convite aceito! Voc√™s agora s√£o um casal no app',
        couple
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao aceitar convite:', error);
      res.status(400).json({
        error: error.message,
        code: 'ACCEPT_ERROR'
      });
    }
  }
  
  // Rejeitar convite
  async rejectCoupleInvite(req, res) {
    try {
      const { uid: userId } = req.user;
      const { inviteId } = req.params;
      
      await coupleService.rejectCoupleInvite(inviteId, userId);
      
      res.json({
        success: true,
        message: 'Convite rejeitado'
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao rejeitar convite:', error);
      res.status(400).json({
        error: error.message,
        code: 'REJECT_ERROR'
      });
    }
  }
  
  // Buscar convites pendentes
  async getCoupleInvites(req, res) {
    try {
      const { uid: userId } = req.user;
      
      const invites = await coupleService.getPendingInvites(userId);
      
      res.json({
        success: true,
        invites
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar convites:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }
  
  // Buscar dados do casal
  async getCoupleInfo(req, res) {
    try {
      const { uid: userId } = req.user;
      
      const couple = await coupleService.getUserCouple(userId);
      
      if (!couple) {
        return res.status(200).json({
          success: false,
          error: 'Voc√™ ainda n√£o tem um casal formado',
          code: 'NO_COUPLE'
        });
      }
      
      res.json({
        success: true,
        couple
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar casal:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }
  
  // Desfazer casal
  async disconnectCouple(req, res) {
    try {
      const { uid: userId } = req.user;
      
      const couple = await coupleService.getUserCouple(userId);
      
      if (!couple) {
        return res.status(404).json({
          error: 'Voc√™ n√£o tem um casal formado',
          code: 'NO_COUPLE'
        });
      }
      
      await coupleService.breakupCouple(couple.id, userId);
      
      res.json({
        success: true,
        message: 'Casal desfeito com sucesso'
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao desfazer casal:', error);
      res.status(400).json({
        error: error.message,
        code: 'BREAKUP_ERROR'
      });
    }
  }

  // Buscar usu√°rio pelo c√≥digo (para preview antes de enviar convite)
  async searchUserByCode(req, res) {
    try {
      const { code } = req.params;
      
      console.log(`üîç [searchUserByCode] Buscando usu√°rio com c√≥digo: "${code}"`);
      
      const user = await require('../services/userService').getUserByCode(code);
      
      console.log(`üîç [searchUserByCode] Usu√°rio encontrado:`, user ? 'SIM' : 'N√ÉO');
      if (user) {
        console.log(`üîç [searchUserByCode] Dados do usu√°rio:`, {
          uid: user.uid,
          displayName: user.displayName,
          userCode: user.userCode,
          email: user.email ? `${user.email.substring(0, 3)}***` : 'N/A'
        });
      }
      
      if (!user) {
        console.log(`‚ùå [searchUserByCode] Usu√°rio n√£o encontrado com c√≥digo: "${code}"`);
        return res.status(404).json({
          error: 'Usu√°rio n√£o encontrado com este c√≥digo',
          code: 'USER_NOT_FOUND'
        });
      }
      
      const response = {
        success: true,
        user
      };
      
      console.log(`‚úÖ [searchUserByCode] Enviando resposta:`, {
        success: response.success,
        userUid: response.user.uid,
        userCode: response.user.userCode
      });
      
      res.json(response);
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }
  
  // Debug: Listar sess√µes ativas
  async getActiveSessions(req, res) {
    try {
      const sessions = secureWebSocketService.getActiveSessions();
      
      res.json({
        success: true,
        sessions,
        total: sessions.length,
        timestamp: new Date()
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar sess√µes ativas:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Limpar sess√µes antigas manualmente
  async cleanupSessions(req, res) {
    try {
      secureWebSocketService.cleanupOldSessions();
      
      res.json({
        success: true,
        message: 'Limpeza de sess√µes executada',
        timestamp: new Date()
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao limpar sess√µes:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Estat√≠sticas das sess√µes de casal
  async getCoupleStats(req, res) {
    try {
      const sessions = secureWebSocketService.getActiveSessions();
      
      const stats = {
        totalSessions: sessions.length,
        activeSessions: sessions.filter(s => s.isActive).length,
        completedSessions: sessions.filter(s => s.hasDecision).length,
        totalUsers: sessions.reduce((acc, s) => acc + s.userCount, 0),
        avgSwipesPerSession: sessions.length > 0 ? 
          sessions.reduce((acc, s) => acc + s.swipeCount, 0) / sessions.length : 0,
        timestamp: new Date()
      };
      
      res.json({
        success: true,
        stats
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Debug: Verificar sincroniza√ß√£o REST-WebSocket
  async debugWebSocketSync(req, res) {
    try {
      console.log('üîç [DEBUG_SYNC] Verificando sincroniza√ß√£o REST-WebSocket...');
      
      const sessions = secureWebSocketService.getActiveSessions();
      const tempSessionKeys = Array.from(secureWebSocketService.tempSessions.keys());
      const tempSessionsDetail = [];
      
      // Coletar detalhes das sess√µes tempor√°rias
      for (const [key, session] of secureWebSocketService.tempSessions.entries()) {
        tempSessionsDetail.push({
          roomCode: key,
          originalSessionId: session.originalSessionId,
          syncedFromRest: session.syncedFromRest || false,
          coupleId: session.coupleId,
          userCount: session.users?.length || 0,
          users: session.users?.map(u => ({ userId: u.userId, userName: u.userName })),
          isActive: session.isActive,
          createdAt: session.createdAt,
          hasSocketIds: Object.keys(session.socketIds || {}).length > 0
        });
      }
      
      const userSocketsInfo = [];
      for (const [userId, socketInfo] of secureWebSocketService.userSockets.entries()) {
        userSocketsInfo.push({
          userId,
          socketId: socketInfo.socketId,
          coupleId: socketInfo.coupleId
        });
      }
      
      const debugInfo = {
        success: true,
        timestamp: new Date().toISOString(),
        websocketSessions: {
          persistent: sessions.persistentSessions,
          temporary: sessions.tempSessions,
          tempSessionKeys: tempSessionKeys,
          tempSessionsDetail: tempSessionsDetail
        },
        totals: {
          persistentSessions: sessions.persistentSessions?.length || 0,
          temporarySessions: sessions.tempSessions?.length || 0,
          tempSessionKeys: tempSessionKeys.length,
          activeConnections: secureWebSocketService.io?.sockets?.sockets?.size || 0,
          userSockets: secureWebSocketService.userSockets?.size || 0
        },
        userSockets: userSocketsInfo,
        systemInfo: {
          nodeUptime: process.uptime(),
          memoryUsage: process.memoryUsage(),
          platform: process.platform
        }
      };
      
      console.log('‚úÖ [DEBUG_SYNC] Informa√ß√µes coletadas:', {
        tempSessions: tempSessionKeys.length,
        persistentSessions: sessions.persistentSessions?.length || 0,
        activeConnections: secureWebSocketService.io?.sockets?.sockets?.size || 0
      });
      
      res.json(debugInfo);
      
    } catch (error) {
      console.error('‚ùå [DEBUG_SYNC] Erro ao coletar informa√ß√µes de debug:', error);
      res.status(500).json({
        success: false,
        error: error.message,
        code: 'DEBUG_ERROR'
      });
    }
  }

  // Criar sess√£o de casal
  async createCoupleSession(req, res) {
    try {
      const { uid: userId } = req.user;
      
      const couple = await coupleService.getUserCouple(userId);
      if (!couple) {
        return res.status(404).json({
          error: 'Voc√™ n√£o tem um casal formado',
          code: 'NO_COUPLE'
        });
      }
      
      const session = await coupleService.startDecisionSession(couple.id, userId);
      
      res.json({
        success: true,
        message: 'Sess√£o criada com sucesso',
        session
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao criar sess√£o:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Entrar em sess√£o de casal
  async joinCoupleSession(req, res) {
    try {
      const { uid: userId } = req.user;
      const { sessionId } = req.body;
      
      const session = await coupleService.joinCoupleSession(sessionId, userId);
      
      res.json({
        success: true,
        message: 'Entrou na sess√£o com sucesso',
        session
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao entrar na sess√£o:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Obter status da sess√£o
  async getCoupleSessionStatus(req, res) {
    try {
      const { uid: userId } = req.user;
      
      const couple = await coupleService.getUserCouple(userId);
      if (!couple) {
        return res.status(404).json({
          error: 'Voc√™ n√£o tem um casal formado',
          code: 'NO_COUPLE'
        });
      }
      
      const session = await coupleService.getCoupleSessionStatus(couple.id);
      
      res.json({
        success: true,
        session: session || null
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao obter status da sess√£o:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Sair da sess√£o
  async leaveCoupleSession(req, res) {
    try {
      const { uid: userId } = req.user;
      
      await coupleService.leaveCoupleSession(userId);
      
      res.json({
        success: true,
        message: 'Saiu da sess√£o com sucesso'
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao sair da sess√£o:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Obter feed sincronizado para casais
  async getCouplesFeed(req, res) {
    try {
      const { uid: userId } = req.user;
      
      const couple = await coupleService.getUserCouple(userId);
      if (!couple) {
        return res.status(404).json({
          error: 'Voc√™ n√£o tem um casal formado',
          code: 'NO_COUPLE'
        });
      }
      
      // Return demo feed for now
      const feed = {
        dishes: [],
        restaurants: [],
        sessionActive: false
      };
      
      res.json({
        success: true,
        feed
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao obter feed:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Processar swipe de casal
  async handleCoupleSwipe(req, res) {
    try {
      const { uid: userId } = req.user;
      const { dishId, action } = req.body;
      
      if (!dishId || !action) {
        return res.status(400).json({
          error: 'dishId e action s√£o obrigat√≥rios',
          code: 'MISSING_FIELDS'
        });
      }
      
      const result = await coupleService.handleCoupleSwipe(userId, dishId, action);
      
      res.json({
        success: true,
        result
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao processar swipe:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Obter matches do casal
  async getCoupleMatches(req, res) {
    try {
      const { uid: userId } = req.user;
      
      const couple = await coupleService.getUserCouple(userId);
      if (!couple) {
        return res.status(404).json({
          error: 'Voc√™ n√£o tem um casal formado',
          code: 'NO_COUPLE'
        });
      }
      
      const matches = await coupleService.getCoupleMatches(couple.id);
      
      res.json({
        success: true,
        matches: matches || []
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao obter matches:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Debug: Testar cria√ß√£o de sess√£o manual
  async testCreateSession(req, res) {
    try {
      console.log('üß™ [TEST_SESSION] Criando sess√£o de teste...');
      
      const testSessionId = `test_${Date.now()}`;
      const testCoupleId = `test_couple_${Date.now()}`;
      const testUsers = ['test_user_1', 'test_user_2'];
      
      console.log('üß™ [TEST_SESSION] Dados de teste:', {
        sessionId: testSessionId,
        coupleId: testCoupleId,
        users: testUsers
      });
      
      const syncResult = secureWebSocketService.syncCoupleSession(testSessionId, testCoupleId, testUsers);
      
      res.json({
        success: true,
        message: 'Sess√£o de teste criada',
        testData: {
          sessionId: testSessionId,
          coupleId: testCoupleId,
          users: testUsers,
          roomCode: syncResult.roomCode
        },
        syncResult: syncResult,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      console.error('‚ùå [TEST_SESSION] Erro ao criar sess√£o de teste:', error);
      res.status(500).json({
        success: false,
        error: error.message,
        code: 'TEST_ERROR'
      });
    }
  }

  // Iniciar sess√£o de decis√£o automaticamente (novo fluxo simplificado)
  async startDecisionSession(req, res) {
    try {
      const { uid: userId, name: userName } = req.user;
      const { message } = req.body;
      
      console.log(`üöÄ [START_DECISION] ${userName} (${userId}) quer iniciar decis√£o`);
      
      // Verificar se usu√°rios s√£o realmente um casal
      const couple = await coupleService.getUserCouple(userId);
      if (!couple) {
        return res.status(404).json({
          error: 'Voc√™ n√£o tem um casal formado',
          code: 'NO_COUPLE'
        });
      }
      
      console.log(`üìä [START_DECISION] Dados do casal:`, JSON.stringify({
        id: couple.id,
        users: couple.users,
        userNames: couple.userNames
      }, null, 2));
      
      // Extrair automaticamente o partnerId do casal
      const partnerId = couple.users.find(id => id !== userId);
      if (!partnerId) {
        return res.status(500).json({
          error: 'Erro interno: parceiro n√£o encontrado no casal',
          code: 'PARTNER_NOT_FOUND'
        });
      }
      
      console.log(`üë´ [START_DECISION] Parceiro identificado: ${partnerId} (${couple.userNames[partnerId]})`);
      
      console.log(`‚úÖ [START_DECISION] Casal v√°lido encontrado: ${couple.id}`);
      console.log(`üéØ [START_DECISION] Iniciando sess√£o para: ${userName} (${userId}) + ${couple.userNames[partnerId]} (${partnerId})`);
      
      // Iniciar sess√£o de decis√£o no Firebase
      const session = await coupleService.startDecisionSession(couple.id, userId);
      console.log(`üìù [START_DECISION] Sess√£o criada no Firebase: ${session.sessionId}`);
      
      // üÜï SINCRONIZAR SESS√ÉO COM WEBSOCKET
      console.log(`üîÑ [START_DECISION] === SINCRONIZANDO SESS√ÉO COM WEBSOCKET ===`);
      console.log(`üîÑ [START_DECISION] Sincronizando sess√£o ${session.sessionId} com WebSocket`);
      
      try {
        const syncResult = secureWebSocketService.syncCoupleSession(session.sessionId, couple.id, [userId, partnerId]);
        
        if (syncResult.success) {
          console.log(`‚úÖ [START_DECISION] Sess√£o ${session.sessionId} sincronizada com WebSocket (roomCode: ${syncResult.roomCode})`);
        } else {
          console.error(`‚ùå [START_DECISION] Falha ao sincronizar sess√£o: ${syncResult.error}`);
        }
      } catch (syncError) {
        console.error('‚ùå [START_DECISION] Erro na sincroniza√ß√£o WebSocket:', syncError);
      }
      
      // Enviar notifica√ß√£o em tempo real para o parceiro via WebSocket
      try {
        const partnerSocket = secureWebSocketService.userSockets.get(partnerId);
        
        if (partnerSocket) {
          console.log(`üì° [START_DECISION] Enviando notifica√ß√£o WebSocket para parceiro ${partnerId}`);
          
          const notificationData = {
            type: 'decision_session_invite',
            fromUserId: userId,
            fromUserName: userName,
            coupleId: couple.id,
            sessionId: session.sessionId,
            message: message || `${userName} quer decidir o que pedir! üçΩÔ∏è`,
            timestamp: new Date().toISOString()
          };
          
          secureWebSocketService.io.to(partnerSocket.socketId).emit('decision:invite', notificationData);
          console.log(`‚úÖ [START_DECISION] Notifica√ß√£o WebSocket enviada para parceiro`);
        } else {
          console.log(`‚ö†Ô∏è [START_DECISION] Parceiro ${partnerId} n√£o est√° online - notifica√ß√£o n√£o enviada`);
        }
      } catch (wsError) {
        console.error('‚ùå [START_DECISION] Erro ao enviar notifica√ß√£o WebSocket:', wsError);
      }
      
      res.json({
        success: true,
        message: 'Convite de decis√£o enviado para seu parceiro',
        session: {
          sessionId: session.sessionId,
          coupleId: couple.id,
          startedBy: userId,
          startedAt: session.startedAt
        }
      });
      
    } catch (error) {
      console.error('‚ùå [START_DECISION] Erro ao iniciar sess√£o de decis√£o:', error);
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'INTERNAL_ERROR'
      });
    }
  }
}

module.exports = new CoupleController();